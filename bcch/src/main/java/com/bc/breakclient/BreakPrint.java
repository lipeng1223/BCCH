/*
 * BreakPrint.java
 *
 * Created on April 30, 2006, 11:29 AM
 */

package com.bc.breakclient;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

import com.bc.orm.BreakReceived;
import com.bc.orm.BreakReceivedItem;
import com.bc.orm.BriCount;
import com.bc.util.DateFormat;
import com.bc.util.PrintLabel;

/**
 *
 * @author  Tim
 */
public class BreakPrint extends javax.swing.JFrame {
    
    private BreakClientGui bcg;
    private HashMap<Integer, BreakReceivedItem> itemMap = new HashMap<Integer, BreakReceivedItem>();
    private HashMap<Integer, Integer> itemBriCountMap = new HashMap<Integer, Integer>();
    
    /** Creates new form BreakPrint */
    public BreakPrint(BreakClientGui bcg) {
        this.bcg = bcg;
        initComponents();
        
        BreakReceived br = bcg.breakReceivedList.get(bcg.getReceivingListIndex());
        
        List<BreakReceivedItem> items = br.getBreakReceivedItems();
        int count = 0;
        printList.setModel(new DefaultListModel());
        for (BreakReceivedItem item : items){
            if (item.getSkid()){
                List<BriCount> countItems = item.getBriCounts();
                for (int i = 0; i < item.getQuantity(); i++){
                    BriCount bric = countItems.get(i);
                    String pieces = "lbs";
                    if (bric.getPieces()){
                        pieces = "pieces";
                    }
                    String barString = item.getIsbn()+"_"+(i+1)+"of"+countItems.size()+" - "+pieces+" "+bric.getCountOrLbs();
                    itemMap.put(count, item);
                    itemBriCountMap.put(count, i);
                    count++;
                    ((DefaultListModel)printList.getModel()).addElement(barString);
                }
            }
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        printList = new javax.swing.JList();
        printButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Print");

        jLabel1.setFont(new java.awt.Font("Arial", 0, 11));
        jLabel1.setText("Print Labels:");

        printList.setFont(new java.awt.Font("Arial", 0, 11));
        jScrollPane1.setViewportView(printList);

        printButton.setText("Print");
        printButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(19, 19, 19)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel1)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                        .add(layout.createSequentialGroup()
                            .add(printButton)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(cancelButton))
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 326, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 229, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(cancelButton)
                    .add(printButton))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        setVisible(false);
        dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void printButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printButtonActionPerformed
        printLabel();
        setVisible(false);
        dispose();
    }//GEN-LAST:event_printButtonActionPerformed
    
    private void printLabel(){
        int[] selected = printList.getSelectedIndices();
        BreakReceived br = bcg.breakReceivedList.get(bcg.getReceivingListIndex());
        
        for (int i : selected){
            BreakReceivedItem item = itemMap.get(i);
            int whichBri = itemBriCountMap.get(i);
            
            if (item.getSkid()){
                StringBuilder sb = new StringBuilder();
                sb.append("PO Date: ");
                sb.append(DateFormat.format(br.getPoDate()));
                sb.append("\nPO Number: ");
                sb.append(br.getPoNumber());
                sb.append("\nVendor: ");
                if (br.getVendor() != null){
                    sb.append(br.getVendor().getCodePlusName());
                } else {
                    sb.append(br.getVendorCode());
                }

                String info = sb.toString();

                List<BriCount> countItems = item.getBriCounts();
                
                String barString = item.getIsbn()+"_"+(whichBri+1)+"of"+countItems.size();
                String numOf = (whichBri+1)+" of "+item.getQuantity();
                BriCount bc = countItems.get(whichBri);
                StringBuilder bcString = new StringBuilder();
                if (bc.getPieces()){
                    bcString.append("\nPiece Count: "+bc.getCountOrLbs());
                } else {
                    bcString.append("\nSkid Lbs: "+bc.getCountOrLbs().intValue());
                }
                Map<String, String> nv = new HashMap<String, String>();
                nv.put("INFO", info+bcString.toString());
                nv.put("NUMOF", numOf);
                nv.put("BARCODETEXT", barString);
                nv.put("USER", bcg.user.getUsername());
                //System.out.println("print: "+barString);
                if (!PrintLabel.dymoPrint(bcg.printerName, bcg.labelFile, nv)){
                    JOptionPane.showMessageDialog(this,
                            "Could not print the labels to the dymo printer.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
            
        }
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton printButton;
    private javax.swing.JList printList;
    // End of variables declaration//GEN-END:variables
    
}
