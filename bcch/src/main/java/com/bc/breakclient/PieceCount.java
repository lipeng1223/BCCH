/*
 * PieceCount.java
 *
 * Created on January 27, 2006, 6:00 PM
 */

package com.bc.breakclient;

import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import com.bc.dao.BreakClientDao;
import com.bc.orm.BreakReceivedItem;
import com.bc.orm.BriCount;

/**
 *
 * @author  Tim
 */
public class PieceCount extends javax.swing.JDialog {
    
    private int count = 0;
    private BreakReceivedItem bri = null;
    
    /** Creates new form PieceCount */
    public PieceCount(java.awt.Frame parent, boolean modal, BreakReceivedItem bri) {
        super(parent, modal);
        initComponents();
        this.bri = bri;
        this.count = bri.getQuantity();
        DefaultTableModel model = (DefaultTableModel)table.getModel();
        for (int i = 0; i < count; i++){
            model.addRow(new Object[]{""+(i+1), "0"});
        }
        ButtonGroup bg = new ButtonGroup();
        bg.add(lbs);
        bg.add(pieces);
        setVisible(true);
    }
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pieces = new javax.swing.JRadioButton();
        lbs = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        finished = new javax.swing.JButton();
        autoFill = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Skid Information");
        setModal(true);

        pieces.setFont(new java.awt.Font("Arial", 0, 11));
        pieces.setSelected(true);
        pieces.setText("Pieces");
        pieces.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        pieces.setMargin(new java.awt.Insets(0, 0, 0, 0));
        pieces.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                piecesActionPerformed(evt);
            }
        });

        lbs.setFont(new java.awt.Font("Arial", 0, 11));
        lbs.setText("Lbs");
        lbs.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        lbs.setMargin(new java.awt.Insets(0, 0, 0, 0));
        lbs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lbsActionPerformed(evt);
            }
        });

        jScrollPane1.setFont(new java.awt.Font("Arial", 0, 11));

        table.setFont(new java.awt.Font("Arial", 0, 11));
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Skid #", "Pieces"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(table);

        finished.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        finished.setText("Finished");
        finished.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finishedActionPerformed(evt);
            }
        });

        autoFill.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        autoFill.setText("Auto Fill From 1");
        autoFill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoFillActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(pieces)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(lbs)
                                .add(29, 29, 29)
                                .add(autoFill, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 120, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)))
                    .add(layout.createSequentialGroup()
                        .add(90, 90, 90)
                        .add(finished)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(pieces)
                    .add(lbs)
                    .add(autoFill))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 297, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 17, Short.MAX_VALUE)
                .add(finished)
                .addContainerGap())
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-267)/2, (screenSize.height-415)/2, 267, 415);
    }// </editor-fold>//GEN-END:initComponents

    private void autoFillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoFillActionPerformed
        // take the table 1 val and fill the rest
        if (table.isEditing()){
            table.getCellEditor(table.getEditingRow(), table.getEditingColumn()).stopCellEditing();
        }
        DefaultTableModel model = (DefaultTableModel)table.getModel();
        String val = (String)model.getValueAt(0, 1);
        for (int i = 1; i < count; i++){
            model.setValueAt(val, i, 1);
        }
    }//GEN-LAST:event_autoFillActionPerformed

    private void finishedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finishedActionPerformed
        if (table.isEditing()){
            table.getCellEditor(table.getEditingRow(), table.getEditingColumn()).stopCellEditing();
        }
        BreakClientDao dao = new BreakClientDao();
        DefaultTableModel model = (DefaultTableModel)table.getModel();
        for (int i = 0; i < count; i++){
            String countString = (String)model.getValueAt(i, 1);
            Float count = 0F;
            try {
                count = Float.parseFloat(countString);
            } catch (NumberFormatException nfe){
                JOptionPane.showMessageDialog(this,
                    "Piece Count or Lbs must be a number.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            if (count <= 0){
                JOptionPane.showMessageDialog(this,
                    "Piece Count or Lbs must be greater than 0.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
        for (int i = 0; i < count; i++){
            String countString = (String)model.getValueAt(i, 1);
            Float count = Float.parseFloat(countString);
            BriCount bc = new BriCount();
            bc.setBreakReceivedItem(bri);
            bc.setCountOrLbs(count);
            bc.setPieces(pieces.isSelected());
            dao.save(bc);
            bri.getBriCounts().add(bc);
        }
        dispose();
    }//GEN-LAST:event_finishedActionPerformed

    private void piecesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_piecesActionPerformed
        DefaultTableModel model = (DefaultTableModel)table.getModel();
        model.setColumnIdentifiers(new Object[]{"Skid #", "Pieces"});
    }//GEN-LAST:event_piecesActionPerformed

    private void lbsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lbsActionPerformed
        DefaultTableModel model = (DefaultTableModel)table.getModel();
        model.setColumnIdentifiers(new Object[]{"Skid #", "Lbs"});
    }//GEN-LAST:event_lbsActionPerformed
    
    /*
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PieceCount(new javax.swing.JFrame(), true).setVisible(true);
            }
        });
    }
     */
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton autoFill;
    private javax.swing.JButton finished;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton lbs;
    private javax.swing.JRadioButton pieces;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
    
}
